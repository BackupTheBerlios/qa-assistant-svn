Preferences to Add Via GConf
============================

:Author: Toshio Kuratomi <toshio-tiki-lounge.com>
:Date: $Date$

.. contents::

Preferences
-----------
Preferences are set on the app.  They could be implemented as GConf
variables.

Person
(Probably happen in the main program.)
* Whether to sign [s]
* Signing identity [s]

Files
(Probably happen in the main program)
* Directory to unrpm into [s]

Display
(Happen in the checklist.)
* Automatically display failed reviews [s] [c]
* Text colours [s] [c]

  (These can probably be implemented in the checkview and cause settings
  to change on the checkview's treetip.)
* Tooltip DESCRIPTION enable/disable [s] [c]
* Tooltip timeout [s] [c]

Status Key:
  [s] In schema
  [c] Used in Code
  [d] Settable via preferences dialog

Coding wise we need three things:

1) We need to write the gconf schema file describing the keys.

  * Need to take a look at other schemas and decide how to structure the
    keys.  Right now it's a flat structure.  We need to think about a hierarchy
    that makes sense.
  
2) Write code to make use of the values.
  * Where should the GConfClient reside?  If each place that uses it has a
    copy, it's wasteful but modular.  OTOH, gconf.client_get_default() doesn't
    seem to create a new client, just get a reference to a main gconf client.
    The app keeps a copy of it, then it needs to pass the client to the other
    modules somehow. [Going with each module that uses it]

3) We need to have a dialog box that has entries for all the properties.
   This can be a glade dialog as the box should be the same for all checklists.
   The dialog needs to take input about all the preferences listed here.
   When the submit button is pressed, put the information into the gconf
   database and change the effect of the values on the program.
   [preferences.py]

http://developer.gnome.org/doc/API/2.0/gconf/

(This one is a program property.  It should start out as the current working
directory everytime the program starts and change as the program progresses.)
* File directories

(Hmmm is this a gpg option instead?)
* Keyserver to download new keys from

Properties?
* Submit to bugzilla or publish to file

Druid?
* Default QA checklist to load

Properties
----------
Properties are set on the checklist.  The checklist type should provide a
set of properties that are legal.  Perhaps implement as GObject values on
the checklist object.

* MD5Sums
* Bugzilla URL
* SRPM to check
* QA checklist loaded

We have a properties dict in the CheckList right now.
What are we going to do with that?
